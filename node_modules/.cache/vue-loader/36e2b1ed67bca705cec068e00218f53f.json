{"remainingRequest":"/Users/tianfeng/Desktop/is216project copy/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tianfeng/Desktop/is216project copy/app/src/views/Community.vue?vue&type=template&id=2cf7da9f&","dependencies":[{"path":"/Users/tianfeng/Desktop/is216project copy/app/src/views/Community.vue","mtime":1636717558440},{"path":"/Users/tianfeng/Desktop/is216project copy/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tianfeng/Desktop/is216project copy/app/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/tianfeng/Desktop/is216project copy/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tianfeng/Desktop/is216project copy/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}